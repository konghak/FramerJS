require=(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({"myModule":[function(require,module,exports){
exports.myVar = "myVariable";

exports.myFunction = function() {
  return print("myFunction is running");
};

exports.myArray = [1, 2, 3];



},{}],"page":[function(require,module,exports){
exports.cardtype = function(superL, startScroll) {
  var allLayers, bg, directionFactor, endAnimation, height, i, j, k, layer, len, margin, remove, results, scroll;
  bg = new Layer({
    width: Screen.width,
    height: Screen.height,
    superLayer: superL,
    backgroundColor: "rgba(240,240,240,1)"
  });
  scroll = new ScrollComponent({
    y: 20,
    superLayer: bg.content,
    width: Screen.width,
    height: Screen.height - 60,
    scrollHorizontal: false,
    contentInset: {
      top: 32,
      bottom: 32
    },
    superLayer: bg
  });
  scroll.content.draggable.bounceOptions = {
    friction: 40,
    tension: 300,
    tolerance: 1
  };
  height = 400;
  margin = 32;
  allLayers = [];
  for (i = j = 0; j < 8; i = ++j) {
    layer = new Layer({
      backgroundColor: "#fff",
      borderRadius: 8,
      width: scroll.width - 48,
      height: height,
      x: 24,
      y: (height + margin) * i,
      superLayer: scroll.content
    });
    layer.style = {
      "font-size": "48px",
      "font-weight": "300",
      "color": "#333",
      "lineHeight": height + "px",
      "box-shadow": "0 1px 6px rgba(0,0,0,0.2)"
    };
    layer.html = "그런";
    allLayers.push(layer);
  }
  scroll.content.draggable.directionLock = true;
  scroll.content.draggable.directionLockThreshold = {
    x: 25,
    y: 25
  };
  scroll.content.draggable.on(Events.DirectionLockDidStart, function(event) {
    var k, len, results;
    results = [];
    for (k = 0, len = allLayers.length; k < len; k++) {
      layer = allLayers[k];
      if (event.x) {
        layer.draggable.enabled = false;
      }
      if (event.y) {
        results.push(layer.draggable.enabled = true);
      } else {
        results.push(void 0);
      }
    }
    return results;
  });
  results = [];
  for (k = 0, len = allLayers.length; k < len; k++) {
    layer = allLayers[k];
    layer.draggable.vertical = false;
    remove = endAnimation = false;
    directionFactor = 1;
    layer.on(Events.DragMove, function() {
      if (Math.abs(this.x) > 300 || Math.abs(this.draggable.velocity.x) > 3) {
        remove = true;
        if (this.draggable.direction === "left") {
          directionFactor = -1;
        }
        if (this.draggable.direction === "right") {
          return directionFactor = 1;
        }
      }
    });
    results.push(layer.on(Events.DragEnd, function(event) {
      var bottomOfPage, l, len1;
      bottomOfPage = scroll.scrollY > (scroll.content.height - Screen.height);
      endAnimation = bottomOfPage ? true : false;
      if (remove === true) {
        this.animate({
          properties: {
            x: Screen.width * directionFactor
          },
          time: 0.2
        });
        Utils.delay(0.2, (function(_this) {
          return function() {
            return _this.destroy();
          };
        })(this));
        for (l = 0, len1 = allLayers.length; l < len1; l++) {
          layer = allLayers[l];
          if (endAnimation) {
            Utils.delay(0.2, function() {
              scroll.scrollToPoint({
                x: 0,
                y: scroll.scrollY - height - margin * 2
              }, true, {
                curve: "spring",
                curveOptions: {
                  tension: 400,
                  friction: 30,
                  tolerance: 0.01
                }
              });
              return scroll.content.once(Events.AnimationEnd, function() {
                var scrollY;
                scrollY = scroll.scrollY;
                scroll.updateContent();
                return scroll.scrollY = scrollY;
              });
            });
          }
          if (layer.index > this.index) {
            layer.animate({
              properties: {
                y: layer.y - height - margin
              },
              curve: "spring",
              curveOptions: {
                tension: 400,
                friction: 30,
                tolerance: 0.01
              },
              delay: 0.2
            });
            if (!endAnimation) {
              layer.once(Events.AnimationEnd, (function(_this) {
                return function() {
                  var scrollY;
                  scrollY = scroll.scrollY;
                  scroll.updateContent();
                  return scroll.scrollY = scrollY;
                };
              })(this));
            }
          }
        }
        return remove = false;
      } else {
        return this.animate({
          properties: {
            x: 24
          },
          curve: "spring(200,40,0)"
        });
      }
    }));
  }
  return results;
};



},{}]},{},[])
//# sourceMappingURL=data:application/json;base64,
