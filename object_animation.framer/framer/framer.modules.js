require=(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({"button_ani":[function(require,module,exports){
exports.flipCard = function(one, two, perspective, flipCurve, x, y, superLayer) {
  var container, perspectiveLayer;
  perspectiveLayer = new Layer({
    width: one.width,
    height: one.height,
    backgroundColor: "transparent"
  });
  perspectiveLayer.perspective = perspective;
  perspectiveLayer.x = x;
  perspectiveLayer.y = y;
  perspectiveLayer.superLayer = superLayer;
  container = new Layer({
    width: one.width,
    height: one.height,
    backgroundColor: "transparent",
    superLayer: perspectiveLayer
  });
  container.center();
  two.superLayer = container;
  one.superLayer = container;
  two.rotationY = 180;
  one.states.add({
    one: {
      opacity: 1
    },
    two: {
      opacity: 0
    }
  });
  one.states.animationOptions = {
    curve: flipCurve
  };
  one.states.switchInstant("one");
  two.states.add({
    one: {
      opacity: 0
    },
    two: {
      opacity: 1
    }
  });
  two.states.animationOptions = {
    curve: flipCurve
  };
  two.states.switchInstant("one");
  container.states.add({
    one: {
      rotationY: 0
    },
    two: {
      rotationY: 180
    }
  });
  container.states.animationOptions = {
    curve: flipCurve
  };
  container.states.switchInstant("one");
  return container.on(Events.Click, function() {
    this.states.next(["two", "one"]);
    two.states.next(["two", "one"]);
    return one.states.next(["two", "one"]);
  });
};



},{}],"myModule":[function(require,module,exports){
exports.myVar = "myVariable";

exports.myFunction = function() {
  return print("myFunction is running");
};

exports.myArray = [1, 2, 3];



},{}]},{},[])
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCIvVXNlcnMva29uZ2hhay9EZXNrdG9wL0ZyYW1lckpTL29iamVjdF9hbmltYXRpb24uZnJhbWVyL21vZHVsZXMvYnV0dG9uX2FuaS5jb2ZmZWUiLCIvVXNlcnMva29uZ2hhay9EZXNrdG9wL0ZyYW1lckpTL29iamVjdF9hbmltYXRpb24uZnJhbWVyL21vZHVsZXMvbXlNb2R1bGUuY29mZmVlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FDQUEsT0FBTyxDQUFDLFFBQVIsR0FBbUIsU0FBQyxHQUFELEVBQU0sR0FBTixFQUFXLFdBQVgsRUFBd0IsU0FBeEIsRUFBbUMsQ0FBbkMsRUFBc0MsQ0FBdEMsRUFBeUMsVUFBekMsR0FBQTtBQUVmLE1BQUEsMkJBQUE7QUFBQSxFQUFBLGdCQUFBLEdBQXVCLElBQUEsS0FBQSxDQUNuQjtBQUFBLElBQUEsS0FBQSxFQUFPLEdBQUcsQ0FBQyxLQUFYO0FBQUEsSUFDQSxNQUFBLEVBQVEsR0FBRyxDQUFDLE1BRFo7QUFBQSxJQUVBLGVBQUEsRUFBaUIsYUFGakI7R0FEbUIsQ0FBdkIsQ0FBQTtBQUFBLEVBSUEsZ0JBQWdCLENBQUMsV0FBakIsR0FBK0IsV0FKL0IsQ0FBQTtBQUFBLEVBS0EsZ0JBQWdCLENBQUMsQ0FBakIsR0FBcUIsQ0FMckIsQ0FBQTtBQUFBLEVBTUEsZ0JBQWdCLENBQUMsQ0FBakIsR0FBcUIsQ0FOckIsQ0FBQTtBQUFBLEVBT0EsZ0JBQWdCLENBQUMsVUFBakIsR0FBOEIsVUFQOUIsQ0FBQTtBQUFBLEVBU0EsU0FBQSxHQUFnQixJQUFBLEtBQUEsQ0FDWjtBQUFBLElBQUEsS0FBQSxFQUFPLEdBQUcsQ0FBQyxLQUFYO0FBQUEsSUFDQSxNQUFBLEVBQVEsR0FBRyxDQUFDLE1BRFo7QUFBQSxJQUVBLGVBQUEsRUFBaUIsYUFGakI7QUFBQSxJQUdBLFVBQUEsRUFBWSxnQkFIWjtHQURZLENBVGhCLENBQUE7QUFBQSxFQWdCQSxTQUFTLENBQUMsTUFBVixDQUFBLENBaEJBLENBQUE7QUFBQSxFQW1CQSxHQUFHLENBQUMsVUFBSixHQUFpQixTQW5CakIsQ0FBQTtBQUFBLEVBb0JBLEdBQUcsQ0FBQyxVQUFKLEdBQWlCLFNBcEJqQixDQUFBO0FBQUEsRUF1QkEsR0FBRyxDQUFDLFNBQUosR0FBZ0IsR0F2QmhCLENBQUE7QUFBQSxFQTZCQSxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQVgsQ0FDSTtBQUFBLElBQUEsR0FBQSxFQUFLO0FBQUEsTUFBQyxPQUFBLEVBQVMsQ0FBVjtLQUFMO0FBQUEsSUFDQSxHQUFBLEVBQUs7QUFBQSxNQUFDLE9BQUEsRUFBUyxDQUFWO0tBREw7R0FESixDQTdCQSxDQUFBO0FBQUEsRUFnQ0EsR0FBRyxDQUFDLE1BQU0sQ0FBQyxnQkFBWCxHQUNJO0FBQUEsSUFBQSxLQUFBLEVBQU8sU0FBUDtHQWpDSixDQUFBO0FBQUEsRUFrQ0EsR0FBRyxDQUFDLE1BQU0sQ0FBQyxhQUFYLENBQXlCLEtBQXpCLENBbENBLENBQUE7QUFBQSxFQW9DQSxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQVgsQ0FDSTtBQUFBLElBQUEsR0FBQSxFQUFLO0FBQUEsTUFBQyxPQUFBLEVBQVMsQ0FBVjtLQUFMO0FBQUEsSUFDQSxHQUFBLEVBQUs7QUFBQSxNQUFDLE9BQUEsRUFBUyxDQUFWO0tBREw7R0FESixDQXBDQSxDQUFBO0FBQUEsRUF1Q0EsR0FBRyxDQUFDLE1BQU0sQ0FBQyxnQkFBWCxHQUNJO0FBQUEsSUFBQSxLQUFBLEVBQU8sU0FBUDtHQXhDSixDQUFBO0FBQUEsRUF5Q0EsR0FBRyxDQUFDLE1BQU0sQ0FBQyxhQUFYLENBQXlCLEtBQXpCLENBekNBLENBQUE7QUFBQSxFQTJDQSxTQUFTLENBQUMsTUFBTSxDQUFDLEdBQWpCLENBQ0k7QUFBQSxJQUFBLEdBQUEsRUFBSztBQUFBLE1BQUMsU0FBQSxFQUFXLENBQVo7S0FBTDtBQUFBLElBQ0EsR0FBQSxFQUFLO0FBQUEsTUFBQyxTQUFBLEVBQVcsR0FBWjtLQURMO0dBREosQ0EzQ0EsQ0FBQTtBQUFBLEVBOENBLFNBQVMsQ0FBQyxNQUFNLENBQUMsZ0JBQWpCLEdBQ0k7QUFBQSxJQUFBLEtBQUEsRUFBTyxTQUFQO0dBL0NKLENBQUE7QUFBQSxFQWdEQSxTQUFTLENBQUMsTUFBTSxDQUFDLGFBQWpCLENBQStCLEtBQS9CLENBaERBLENBQUE7U0FpREEsU0FBUyxDQUFDLEVBQVYsQ0FBYSxNQUFNLENBQUMsS0FBcEIsRUFBMkIsU0FBQSxHQUFBO0FBQ3ZCLElBQUEsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFaLENBQWlCLENBQUMsS0FBRCxFQUFPLEtBQVAsQ0FBakIsQ0FBQSxDQUFBO0FBQUEsSUFDQSxHQUFHLENBQUMsTUFBTSxDQUFDLElBQVgsQ0FBZ0IsQ0FBQyxLQUFELEVBQU8sS0FBUCxDQUFoQixDQURBLENBQUE7V0FFQSxHQUFHLENBQUMsTUFBTSxDQUFDLElBQVgsQ0FBZ0IsQ0FBQyxLQUFELEVBQU8sS0FBUCxDQUFoQixFQUh1QjtFQUFBLENBQTNCLEVBbkRlO0FBQUEsQ0FBbkIsQ0FBQTs7Ozs7QUNJQSxPQUFPLENBQUMsS0FBUixHQUFnQixZQUFoQixDQUFBOztBQUFBLE9BRU8sQ0FBQyxVQUFSLEdBQXFCLFNBQUEsR0FBQTtTQUNwQixLQUFBLENBQU0sdUJBQU4sRUFEb0I7QUFBQSxDQUZyQixDQUFBOztBQUFBLE9BS08sQ0FBQyxPQUFSLEdBQWtCLENBQUMsQ0FBRCxFQUFJLENBQUosRUFBTyxDQUFQLENBTGxCLENBQUEiLCJmaWxlIjoiZ2VuZXJhdGVkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbiBlKHQsbixyKXtmdW5jdGlvbiBzKG8sdSl7aWYoIW5bb10pe2lmKCF0W29dKXt2YXIgYT10eXBlb2YgcmVxdWlyZT09XCJmdW5jdGlvblwiJiZyZXF1aXJlO2lmKCF1JiZhKXJldHVybiBhKG8sITApO2lmKGkpcmV0dXJuIGkobywhMCk7dmFyIGY9bmV3IEVycm9yKFwiQ2Fubm90IGZpbmQgbW9kdWxlICdcIitvK1wiJ1wiKTt0aHJvdyBmLmNvZGU9XCJNT0RVTEVfTk9UX0ZPVU5EXCIsZn12YXIgbD1uW29dPXtleHBvcnRzOnt9fTt0W29dWzBdLmNhbGwobC5leHBvcnRzLGZ1bmN0aW9uKGUpe3ZhciBuPXRbb11bMV1bZV07cmV0dXJuIHMobj9uOmUpfSxsLGwuZXhwb3J0cyxlLHQsbixyKX1yZXR1cm4gbltvXS5leHBvcnRzfXZhciBpPXR5cGVvZiByZXF1aXJlPT1cImZ1bmN0aW9uXCImJnJlcXVpcmU7Zm9yKHZhciBvPTA7bzxyLmxlbmd0aDtvKyspcyhyW29dKTtyZXR1cm4gc30pIiwiZXhwb3J0cy5mbGlwQ2FyZCA9IChvbmUsIHR3bywgcGVyc3BlY3RpdmUsIGZsaXBDdXJ2ZSwgeCwgeSwgc3VwZXJMYXllcikgLT5cbiAgICAjIENyZWF0ZSBhIG5ldyBjb250YWluZXIgbGF5ZXJcbiAgICBwZXJzcGVjdGl2ZUxheWVyID0gbmV3IExheWVyXG4gICAgICAgIHdpZHRoOiBvbmUud2lkdGggXG4gICAgICAgIGhlaWdodDogb25lLmhlaWdodCBcbiAgICAgICAgYmFja2dyb3VuZENvbG9yOiBcInRyYW5zcGFyZW50XCJcbiAgICBwZXJzcGVjdGl2ZUxheWVyLnBlcnNwZWN0aXZlID0gcGVyc3BlY3RpdmVcbiAgICBwZXJzcGVjdGl2ZUxheWVyLnggPSB4XG4gICAgcGVyc3BlY3RpdmVMYXllci55ID0geVxuICAgIHBlcnNwZWN0aXZlTGF5ZXIuc3VwZXJMYXllciA9IHN1cGVyTGF5ZXJcbiAgICBcbiAgICBjb250YWluZXIgPSBuZXcgTGF5ZXJcbiAgICAgICAgd2lkdGg6IG9uZS53aWR0aFxuICAgICAgICBoZWlnaHQ6IG9uZS5oZWlnaHRcbiAgICAgICAgYmFja2dyb3VuZENvbG9yOiBcInRyYW5zcGFyZW50XCJcbiAgICAgICAgc3VwZXJMYXllcjogcGVyc3BlY3RpdmVMYXllclxuXG4gICAgIyBDZW50ZXIgdGhlIGNvbnRhaW5lclxuICAgIGNvbnRhaW5lci5jZW50ZXIoKVxuICAgIFxuICAgICNTZXQgc3VwZXJMYXllciBmb3IgYm90aCBmcm9udCBhbmQgYmFjayBsYXllcnNcbiAgICB0d28uc3VwZXJMYXllciA9IGNvbnRhaW5lclxuICAgIG9uZS5zdXBlckxheWVyID0gY29udGFpbmVyXG4gICAgXG4gICAgIyBSb3RhdGUgdGhlIGJhY2sgaW1hZ2Ugb24gaW50aWFsXG4gICAgdHdvLnJvdGF0aW9uWSA9IDE4MCAgICBcbiAgICAjIyMjIyMjIyMjIyMjIyMjIyMjIyMjI1xuICAgICMgU3RhdGVzXG4gICAgIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyNcbiAgICBcbiAgICBcbiAgICBvbmUuc3RhdGVzLmFkZFxuICAgICAgICBvbmU6IHtvcGFjaXR5OiAxfVxuICAgICAgICB0d286IHtvcGFjaXR5OiAwfVxuICAgIG9uZS5zdGF0ZXMuYW5pbWF0aW9uT3B0aW9ucyA9XG4gICAgICAgIGN1cnZlOiBmbGlwQ3VydmVcbiAgICBvbmUuc3RhdGVzLnN3aXRjaEluc3RhbnQoXCJvbmVcIilcbiAgICBcbiAgICB0d28uc3RhdGVzLmFkZFxuICAgICAgICBvbmU6IHtvcGFjaXR5OiAwfVxuICAgICAgICB0d286IHtvcGFjaXR5OiAxfVxuICAgIHR3by5zdGF0ZXMuYW5pbWF0aW9uT3B0aW9ucyA9XG4gICAgICAgIGN1cnZlOiBmbGlwQ3VydmVcbiAgICB0d28uc3RhdGVzLnN3aXRjaEluc3RhbnQoXCJvbmVcIilcbiAgICBcbiAgICBjb250YWluZXIuc3RhdGVzLmFkZFxuICAgICAgICBvbmU6IHtyb3RhdGlvblk6IDB9XG4gICAgICAgIHR3bzoge3JvdGF0aW9uWTogMTgwfVxuICAgIGNvbnRhaW5lci5zdGF0ZXMuYW5pbWF0aW9uT3B0aW9ucyA9XG4gICAgICAgIGN1cnZlOiBmbGlwQ3VydmVcbiAgICBjb250YWluZXIuc3RhdGVzLnN3aXRjaEluc3RhbnQoXCJvbmVcIilcbiAgICBjb250YWluZXIub24gRXZlbnRzLkNsaWNrLCAtPlxuICAgICAgICB0aGlzLnN0YXRlcy5uZXh0KFtcInR3b1wiLFwib25lXCJdKVxuICAgICAgICB0d28uc3RhdGVzLm5leHQoW1widHdvXCIsXCJvbmVcIl0pXG4gICAgICAgIG9uZS5zdGF0ZXMubmV4dChbXCJ0d29cIixcIm9uZVwiXSlcblxuXG5cblxuXG4iLCIjIEFkZCB0aGUgZm9sbG93aW5nIGxpbmUgdG8geW91ciBwcm9qZWN0IGluIEZyYW1lciBTdHVkaW8uIFxuIyBteU1vZHVsZSA9IHJlcXVpcmUgXCJteU1vZHVsZVwiXG4jIFJlZmVyZW5jZSB0aGUgY29udGVudHMgYnkgbmFtZSwgbGlrZSBteU1vZHVsZS5teUZ1bmN0aW9uKCkgb3IgbXlNb2R1bGUubXlWYXJcblxuZXhwb3J0cy5teVZhciA9IFwibXlWYXJpYWJsZVwiXG5cbmV4cG9ydHMubXlGdW5jdGlvbiA9IC0+XG5cdHByaW50IFwibXlGdW5jdGlvbiBpcyBydW5uaW5nXCJcblxuZXhwb3J0cy5teUFycmF5ID0gWzEsIDIsIDNdIl19
